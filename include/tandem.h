#include "commit.h"
#include "utils.h"
#include "bbsplus.h"
#include "homenc.h"
#include <openssl/ec.h>
#include <openssl/bn.h>
#include <openssl/obj_mac.h>

#define TANDEM_PROOF_FAILED -1
#define TANDEM_SECPAR 256
#define TANDEM_SECPAR_BYTES 32

// l_mu = log(p) + secpar + log(k + 1) + 2
//      =    256 +    128 +          6 + 2
// (assuming that k < 64)
#define TANDEM_DELTA_BITS 392

struct tandem_proof {
    bn_t *hresps;
    bn_t *rresps;

    bn_t hresp;
    bn_t sprimeresp;
    bn_t skresp;
    bn_t tokenidresp;

    bn_t challenge;
};

struct ServerObtainStart {
    uint8_t discloseCommit[TANDEM_SECPAR / 8];
};

struct ServerState {
    struct homenc_pk *pk;
    struct homenc_sk *sk;
    struct bbsplus_pk *bbs_pk;
    struct bbsplus_sk *bbs_sk;
    struct commit_pk *com_pk;
    mpz_t delta_limit;

    // Public key for tokenid encryption
    g1_t pkid;

    bn_t xs;
    struct homenc_ctxt xsenc;

    size_t difficulty;
    gmp_randstate_t *rand_state;

    EC_GROUP *group;
    EC_POINT *genh;
    BN_CTX *ctx;
    BIGNUM *order;
};

struct ServerObtainState {
    struct ServerState *st;

    // Indices choicen to reveal
    unsigned int *indices;
    unsigned char indicesRand[TANDEM_SECPAR_BYTES];

    // Commitments by the user
    struct commit_com *Commits;
    uint8_t *DeltaCommits;
};

struct UserState {
    struct homenc_pk *pk;
    struct commit_pk *com_pk;
    struct bbsplus_pk *bbs_pk;
    mpz_t delta_limit;

    size_t difficulty;
    bn_t xu;

    bn_t skid;
    g1_t pkid;

    struct homenc_ctxt xsenc;

    gmp_randstate_t *rand_state;

    EC_GROUP *group;
    EC_POINT *genh;
    BN_CTX *ctx;
};

struct UserObtainState {
    struct UserState *st;

    // Randomness generated by User
    struct homenc_ptxt *deltas;
    struct homenc_encrand *kappas;
    struct commit_rand *rs;
    uint8_t *xis;

    // Values computed by user
    struct homenc_ctxt *cs;
    bn_t *hash;
    struct commit_com *Commits;
    uint8_t *DeltaCommits;

    // Final ciphertext
    struct homenc_ptxt delta;
    struct homenc_encrand kappa;
    struct homenc_ctxt ctxt;
    bn_t ctxt_hash;

    bn_t *attributes;

    unsigned int *complement;
    unsigned int *indices;

    bn_t tokenid;

    bn_t s;

    uint8_t discloseCommit[TANDEM_SECPAR_BYTES];
};

struct ServerRegisterState {
    EC_POINT *C;
    BIGNUM *xs;
    BIGNUM *r;

    // State of cutting process
    struct homenc_ptxt *deltas;
    struct homenc_encrand *kappas;
    BIGNUM **rs;

    struct ServerState *st;

    uint8_t discloseCommit[TANDEM_SECPAR_BYTES];
};

struct UserRegisterState {
    // Indices choicen to reveal
    unsigned int *indices;
    unsigned char indicesRand[TANDEM_SECPAR_BYTES];

    EC_POINT *C;

    struct UserState *st;
};

struct RegisterServerStart {
    EC_POINT *C;
    struct homenc_ctxt xsenc;
};

struct RegisterUserStart {
    g1_t pkid;
    uint8_t discloseCommit[TANDEM_SECPAR / 8];
};

struct RegisterServerCommit {
    struct homenc_ctxt *cs;
    EC_POINT **Cs;
};


struct KeyShareToken {
    size_t difficulty;

    struct homenc_ptxt *deltas;
    struct homenc_ctxt *cs;
    struct homenc_encrand *kappas;
    bn_t *hash;

    struct homenc_encrand kappa;
    struct homenc_ctxt ctxt;
    struct homenc_ptxt delta;
    bn_t ctxt_hash;

    bn_t ushare;
    bn_t tokenid;

    struct bbsplus_sign sign;
};

struct ServerToken {
    struct bbsplus_proof proof;
    struct homenc_ctxt *cs;

    struct homenc_ctxt ctxt;

    bn_t tokenid;
    struct homenc_ptxt *gammas;
    struct homenc_encrand *nus;
};


struct UserObtainCommitMsg {
    struct commit_com *Commits;
    uint8_t *DeltaCommits;
};

struct ServerObtainChoice {
    unsigned int *indices;
    unsigned char indicesRand[TANDEM_SECPAR_BYTES];
};

struct UserObtainReveal {
    struct homenc_ctxt *cs;
    struct homenc_ptxt *deltas;
    struct homenc_encrand *kappas;
    struct commit_rand *rs;
    uint8_t *xis;

    struct tandem_proof proof;

    g1_t A;
};

struct ServerObtainIssue {
    int status;

    struct bbsplus_sign sign;
};

void
tandem_setup_server( struct ServerState *state,
        struct homenc_pk *pk, struct homenc_sk *sk,
        struct bbsplus_pk *bbs_pk, struct bbsplus_sk *bbs_sk,
        struct commit_pk *com_pk, bn_t xs, size_t difficulty,
        gmp_randstate_t *rand_state,
        EC_GROUP *group, EC_POINT *genh, BN_CTX *ctx);

void
tandem_setup_user(struct UserState *state,
        struct homenc_pk *pk, struct bbsplus_pk *bbs_pk,
        struct commit_pk *com_pk, bn_t xu, size_t difficulty,
        gmp_randstate_t *rand_state,
        EC_GROUP *group, EC_POINT *genh, BN_CTX *ctx);

void
tandem_setup_fakeregister(struct UserState *user_state,
        struct ServerState *server_state);

void
tandem_clear_server_state(struct ServerState *state);

void
tandem_clear_user_state(struct UserState *state);

//////////

void
tandem_obtain_server_start(struct ServerObtainStart *msg,
        struct ServerObtainState *state, struct ServerState *st);

void
tandem_register_server_start(struct RegisterServerStart *msg,
        struct ServerRegisterState *state,
        struct ServerState *st);

void
tandem_register_user_start(struct RegisterUserStart *msg,
        struct UserRegisterState *state,
        struct UserState *st,
        struct RegisterServerStart *server_msg);

//////////////////////

void tandem_obtain_user_cut(struct UserObtainState *state,
        struct UserObtainCommitMsg *commit_msg,
        struct UserState *st,
        struct ServerObtainStart *server_start);

void tandem_obtain_server_choose(struct ServerObtainChoice *choice_msg,
        struct ServerObtainState *state,
        struct UserObtainCommitMsg *commit_msg);

void tandem_obtain_user_reveal(struct UserObtainReveal *reveal_msg,
        struct ServerObtainChoice *choice_msg,
        struct UserObtainState *state);

void tandem_free_user_reveal(struct UserObtainReveal *reveal_msg,
        size_t difficulty);

int tandem_obtain_server_check_and_issue(struct ServerObtainIssue *issue_msg,
        struct ServerObtainState *state,
        struct UserObtainReveal *reveal);

int tandem_obtain_user_token(struct KeyShareToken *token,
        struct ServerObtainIssue *issue_msg,
        struct UserObtainState *state);

void tandem_free_user_obtain_state(struct UserObtainState *state);
void tandem_free_server_obtain_state(struct ServerObtainState *state);

void tandem_free_server_obtain_choice(struct ServerObtainChoice *choice_msg);

void tandem_free_user_token(struct KeyShareToken *token);

void tandem_clear_server_token(struct ServerToken *stoken, size_t difficulty);

struct tandem_proof_randomizers {
    bn_t *hrands;
    bn_t *rrands;

    bn_t hrand;
    bn_t sprimerand;
    bn_t skrand;
    bn_t tokenidrand;
};


void tandem_obtain_proof_randomizers(struct tandem_proof_randomizers *rand,
        size_t difficulty, struct commit_pk *com_pk);

void tandem_free_proof_randomizers(struct tandem_proof_randomizers *rand,
        size_t difficulty);

struct tandem_proof_commitments {
    g1_t *ccoms;
    g1_t Acom;
    g1_t pkcom;
};

void tandem_obtain_proof_commitments(struct tandem_proof_commitments *coms,
        struct tandem_proof_randomizers *rand,
        struct UserState *state);

void tandem_free_proof_commitments(struct tandem_proof_commitments *coms,
        size_t difficulty);

void tandem_obtain_proof_challenge(bn_t c, struct tandem_proof_commitments *coms,
        unsigned int *indices, size_t difficulty);

void tandem_obtain_proof_create(struct tandem_proof *proof,
        struct tandem_proof_randomizers *rand,
        struct UserObtainState *state, bn_t c);

void tandem_free_obtain_proof(struct tandem_proof *proof, size_t difficulty);

void
tandem_reconstruct_commitments(struct tandem_proof_commitments *coms,
        struct tandem_proof *proof, g1_t A, g1_t pkid,
        struct commit_com *Commits, unsigned int *complement,
        struct bbsplus_pk *bbs_pk, struct commit_pk *com_pk,
        size_t difficulty);

void
tandem_gen_user_make_token(struct ServerToken *stoken,
        struct KeyShareToken *token, struct UserState *state);

int
tandem_gen_server_check_token(struct ServerToken *stoken,
        struct ServerState *state);

void
tandem_gen_server_compute_share(bn_t sshare, struct ServerToken *stoken,
        struct ServerState *state);

void
tandem_commit_to_indices(unsigned char *commitment, unsigned int *indices,
        unsigned char *rand, size_t difficulty);
